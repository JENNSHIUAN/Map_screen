{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nexport var GET_CITIES = 'GET_CITIES';\nvar API_URL = 'https://mocki.io/v1/c740b608-1673-43e3-89b7-36c2bda1a211';\nexport var getCities = function getCities() {\n  try {\n    return function _callee(dispatch) {\n      var result, json;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(fetch(API_URL, {\n                method: 'GET',\n                headers: {\n                  'Content-Type': 'application/json'\n                }\n              }));\n\n            case 2:\n              result = _context.sent;\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(result.json());\n\n            case 5:\n              json = _context.sent;\n\n              if (json) {\n                dispatch({\n                  type: GET_CITIES,\n                  payload: json\n                });\n              } else {\n                console.log('Unable to fetch!');\n              }\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"names":["GET_CITIES","API_URL","getCities","dispatch","fetch","method","headers","result","json","type","payload","console","log","error"],"sources":["/mnt/d/site-project/Map_screen/Redux/actions.js"],"sourcesContent":["export const GET_CITIES = 'GET_CITIES';\r\n\r\nconst API_URL = 'https://mocki.io/v1/c740b608-1673-43e3-89b7-36c2bda1a211';\r\n\r\nexport const getCities = () => {\r\n    try {\r\n        return async dispatch => {\r\n            const result = await fetch(API_URL, {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n            });\r\n            const json = await result.json();\r\n            if (json) {\r\n                dispatch({\r\n                    type: GET_CITIES,\r\n                    payload: json\r\n                });\r\n            } else {\r\n                console.log('Unable to fetch!');\r\n            }\r\n        }\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}"],"mappings":";AAAA,OAAO,IAAMA,UAAU,GAAG,YAAnB;AAEP,IAAMC,OAAO,GAAG,0DAAhB;AAEA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,GAAM;EAC3B,IAAI;IACA,OAAO,iBAAMC,QAAN;MAAA;MAAA;QAAA;UAAA;YAAA;cAAA;cAAA,iCACkBC,KAAK,CAACH,OAAD,EAAU;gBAChCI,MAAM,EAAE,KADwB;gBAEhCC,OAAO,EAAE;kBACL,gBAAgB;gBADX;cAFuB,CAAV,CADvB;;YAAA;cACGC,MADH;cAAA;cAAA,iCAOgBA,MAAM,CAACC,IAAP,EAPhB;;YAAA;cAOGA,IAPH;;cAQH,IAAIA,IAAJ,EAAU;gBACNL,QAAQ,CAAC;kBACLM,IAAI,EAAET,UADD;kBAELU,OAAO,EAAEF;gBAFJ,CAAD,CAAR;cAIH,CALD,MAKO;gBACHG,OAAO,CAACC,GAAR,CAAY,kBAAZ;cACH;;YAfE;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAAP;EAiBH,CAlBD,CAkBE,OAAOC,KAAP,EAAc;IACZF,OAAO,CAACC,GAAR,CAAYC,KAAZ;EACH;AACJ,CAtBM"},"metadata":{},"sourceType":"module"}